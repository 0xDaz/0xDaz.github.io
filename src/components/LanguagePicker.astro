---
import { getCollection } from 'astro:content';
import { languages, defaultLang } from '../i18n/ui';
import { getLangFromUrl, switchLanguage, useTranslatedPath } from '../i18n/utils';

const currentLang = getLangFromUrl(Astro.url);
const translatePath = useTranslatedPath(currentLang);

// Get all blog posts to check if translation exists
const allPosts = await getCollection('blog');

// Extract the slug from current URL (e.g., "AI/post-name" from "/blog/AI/post-name" or "/ko/blog/AI/post-name")
const pathname = Astro.url.pathname;
const isBlogPost = pathname.includes('/blog/');
let currentSlug = '';

if (isBlogPost) {
	// Remove language prefix and /blog/ to get the slug
	const pathWithoutLang = currentLang !== defaultLang
		? pathname.replace(new RegExp(`^/${currentLang}`), '')
		: pathname;
	currentSlug = pathWithoutLang.replace(/^\/blog\//, '').replace(/\/$/, '');
}

// For each language, check if the post exists
const languageLinks = Object.entries(languages).map(([lang, label]) => {
	let href = switchLanguage(Astro.url, lang);

	// If this is a blog post, check if translation exists
	if (isBlogPost && currentSlug && lang !== currentLang) {
		// Check if post exists in target language
		const targetLangPrefix = lang === defaultLang ? '' : `${lang}/`;
		const targetPostId = `${targetLangPrefix}${currentSlug}`;
		const postExists = allPosts.some(post =>
			post.id.toLowerCase() === targetPostId.toLowerCase()
		);

		// Debug logging (will appear in server logs during build)
		console.log(`[LanguagePicker] Checking ${lang}:`, {
			currentSlug,
			targetPostId,
			postExists,
			availablePostIds: allPosts.map(p => p.id).filter(id => id.toLowerCase().includes(currentSlug.toLowerCase().split('/')[0]))
		});

		// If post doesn't exist, fallback to blog index page of that language
		if (!postExists) {
			href = translatePath('/blog/', lang);
		}
	}

	return { lang, label, href };
});
---

<div class="language-picker">
	{languageLinks.map(({ lang, href }) => (
		<a href={href} class={lang === currentLang ? 'active' : ''}>
			{lang.toUpperCase()}
		</a>
	))}
</div>
